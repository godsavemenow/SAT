process.argv[2];
let location = process.argv[2];

readFormula(location);

exports.solve = function(location) {
  let formula = propsat.readFormula(location)
  let result = doSolve(formula.clauses, formula.variables)
  return result;
   // two fields: isSat and satisfyingAssignment
}

function readFormula(location) {
  let start = require('fs');
  let text = start.readFileSync(location, 'utf8').toString();
  let character = 'v';
  let qV = readQuantity(text, character);
  character = 'c';
  let qC = readQuantity(text, character);
  let clauses = readClauses(text, qC);
  let variables = readVariables(clauses, qV);


  let specOk = checkProblemSpecification(text, clauses, variables);

  let result = { 'clauses': [], 'variables': [] }
  
  if (specOk) {
    result.clauses = clauses;
    result.variables = variables;
  }
  return result;

  }

//cnt is for counters
//str is for strings
//val is for values
//arr is for array

  function readQuantity(text, character){
	if (character == 'v'){
		if(text[cnt].includes("cnf ")){
			if (text[cnt].startsWith("p")){
				let str = text[cnt].toString();
				let val = str.indexOf("cnf ");
				let val2 = 0;
				var str2 = "";
				while (str.charAt[val2+val] != " "){
					let str3 = str2;
					str2 = str3.toString() + str.charAt[val2+val].toString();
				val2++;
				}
				return str2;
			}
		}
	} else if (character == 'c'){
		if(text[cnt].includes("cnf ")){
			let str = text[cnt].toString();
			let val = str.length;
			let str2 = "";
			while(str.charAt(val - 1) != " "){
				let str3 = str2;
				str2 = str.charAt[val -1].toString() + str3.toString();
				val--;
			}
			return str2;
		}
	}
}
  function readVariables(text, qV){

  }

  function readClauses(text, qC){
 	var arr = new Array;
 	var arr2 = new Array;
 	let cont = 0;
 	while(text[cont] != undefined){
 		if (text[cont].endsWith("0")){
 			let str = text[cont].toString();
 			let str2 = new Array;
 			arr2 = str.split(" ");
 			let cont3 = 0;
 			let str4 = new Array;
 			while (arr2[cont3] != " " || arr2[cont3] != undefined){
 			if(arr2[cont~3.includes(" ")){
 				arr2 = arr2.filter(function(str2) {
 					return arr2.trim() != " "; 
 				});
 			}
 			}
 		}
 	}
 	return arr2;
 }

 

 function checkProblemSpecification(text, clauses, variables){

 }



 function doSolve(clauses, assignment, qV) {
  let isSat = false;

  let size = clauses.length;

  while ((!isSat) && strassignment.!includes("0")) {
    if (){
    	isSat = true;
    } else {
    assignment = nextAssignment(assignment);
	}

	let strassignment = assignment.toString();
    
    while(strassignment.length <){
    	strassignment = "0"+strassignment;
    }
    bruteforcer(strassignment);
  }


  let result = {'isSat': isSat, satisfyingAssignment: null}
  
  if (isSat == true) {
    result.satisfyingAssignment = strassignment;
  }
  return result; //pra retornar dois deve ser um array

}

function nextAssignment(assignment){

	if(assignment == undefined){

	} else {
		assignment += 1;
	}
	let basetwo = assignment.toString(2);
	return basetwo;
}

function bruteforcer(clauses, qV){
	let cnt = 0;
	while (clauses[cnt] != undefined){
		let str5 = clauses[cnt];
		if(assignment.charAt() == 1){

		} else {

		}
	cnt++;
	}

}
